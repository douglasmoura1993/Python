List Comprehension, aplica uma expressão arbitrária ao invés de aplicar apenas uma função a uma sequência de elementos.
 Permite desenvolver listas usando uma anotação diferente. Seria essencialmente uma lista de loop for, construída dentro de ‘[]’.
Ex: lst = [ x for x in ‘Python fundamentos’]
Nós normalmente usamos loop for quando trabalhamos com funções map() e usamos list comprehension quando esta for mais fácil de ser aplicada. No entanto, há uma vantagem substancial de desempenho ao utilizar a list comprehension.
Os objetos do tipo list comprehension são ligeiramente mais velozes que função map.
As duas são implementadas em python utilizando linguagem C, o que as tornam muito mais velozes.

List Comprehension
Estrutura importante para grandes conjuntos de dados com alta performance, e simplifica a escrita de código.
Essa estrutura faz compactação das linhas de código, a anotação é diferente das outras estruturas. Colocamos dentro de uma lista ‘[]’ o código como podemos ver nos 
exemplos abaixo.


# Retrorna cada caracter em uma sequência de caracteres.
lista = []
for contar in 'python':
    lista.append(contar)
print(lista)
# List Comprehension
lst = [x for x in 'python']
# Verifica.
print(lst)
#Tipo da variável.
print(type(lst))

# Raiz quadrada e um range de números e retorna uma lista.
lst = [x ** 2 for x in range(0, 11)]
print('Raiz', lst)

# MOD
lst = [x for x in range(11) if x % 2 == 0]
print('Mod', lst)

celsius = [0, 10, 20.1, 34.5]
# Convertendo celsius para Fahrenheit
# Podemos aplicar qualquer operação matemática.
fahrenheit = [ ((float(9)/5) * T + 32) for T in celsius ]
print(fahrenheit)

# '**' simboliza potencia
# Operação aninhadas.
lst = [ x**2 for x in [x**2 for x in range(11)] ]
print(lst)
